name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-web:
    name: Test Web Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: parrotspeak_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: TypeScript type checking
      run: npm run type-check

    - name: Build web application
      run: npm run build

    - name: Database schema validation
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/parrotspeak_test
      run: |
        npm run db:push
        npm run db:seed

  test-mobile:
    name: Test Mobile Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install mobile dependencies
      working-directory: ./mobile-app
      run: npm install --legacy-peer-deps

    - name: TypeScript type checking (mobile)
      working-directory: ./mobile-app
      run: npx tsc --noEmit

    - name: Test mobile build (web)
      working-directory: ./mobile-app
      run: npx expo export:web

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=high

    - name: Check for vulnerabilities
      run: npx audit-ci --high

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-web, test-mobile, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy to staging
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-web, test-mobile, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Deploy to production
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
        MIXPANEL_TOKEN: ${{ secrets.MIXPANEL_TOKEN }}
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

  mobile-build:
    name: Build Mobile App
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Expo CLI
      run: npm install -g @expo/cli

    - name: Install dependencies
      working-directory: ./mobile-app
      run: npm ci

    - name: Build for app stores (iOS)
      working-directory: ./mobile-app
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: |
        # eas build --platform ios --non-interactive
        echo "iOS build would run here with proper EAS setup"

    - name: Build for app stores (Android)
      working-directory: ./mobile-app
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      run: |
        # eas build --platform android --non-interactive
        echo "Android build would run here with proper EAS setup"
